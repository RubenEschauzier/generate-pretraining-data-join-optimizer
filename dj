[1mdiff --git a/src/get_cardinalities_queries/queryVirtuoso.py b/src/get_cardinalities_queries/queryVirtuoso.py[m
[1mindex cebcfb3..8cf6af2 100644[m
[1m--- a/src/get_cardinalities_queries/queryVirtuoso.py[m
[1m+++ b/src/get_cardinalities_queries/queryVirtuoso.py[m
[36m@@ -1,5 +1,6 @@[m
[32m+[m[32mimport requests[m
 from SPARQLWrapper import SPARQLWrapper, JSON[m
[31m-import numpy as np[m
[32m+[m[32mimport os[m
 from tqdm import tqdm[m
 import json[m
 [m
[36m@@ -18,7 +19,13 @@[m [mdef wrapper(url, default_graph):[m
 def execute_query(query, wrapped_sparql_endpoint):[m
     wrapped_sparql_endpoint.setTimeout(60)[m
     wrapped_sparql_endpoint.setQuery(query)[m
[31m-    return wrapped_sparql_endpoint.queryAndConvert()[m
[32m+[m[32m    try:[m
[32m+[m[32m        res = wrapped_sparql_endpoint.queryAndConvert()[m
[32m+[m[32m    except TimeoutError as err:[m
[32m+[m[32m        res = 'NO'[m
[32m+[m[32m        pass[m
[32m+[m
[32m+[m[32m    return res[m
 [m
 [m
 def count_results(result):[m
[36m@@ -29,21 +36,20 @@[m [mdef count_results(result):[m
     return count[m
 [m
 [m
[31m-def execute_array_of_queries(queries, endpoint, ckp=None, queryRandom=True):[m
[32m+[m[32mdef execute_array_of_queries(queries, endpoint, ckp=None):[m
     query_strings = [][m
     query_cardinalities = [][m
 [m
[31m-    for i, query in enumerate(tqdm(queries)):[m
[31m-        if queryRandom:[m
[31m-            ret = execute_query(query[0], endpoint)[m
[31m-        else:[m
[31m-            ret = execute_query(query, endpoint)[m
[32m+[m[32m    if ckp:[m
[32m+[m[32m        os.makedirs(ckp, exist_ok=True)[m
 [m
[32m+[m[32m    for i, query in enumerate(tqdm(queries)):[m
[32m+[m[32m        ret = execute_query(query, endpoint)[m
[32m+[m[32m        if ret == 'NO':[m
[32m+[m[32m            continue[m
         query_cardinalities.append(count_results(ret))[m
[31m-        if queryRandom:[m
[31m-            query_strings.append(query[0])[m
[31m-        else:[m
[31m-            query_strings.append(query)[m
[32m+[m[32m        query_strings.append(query)[m
[32m+[m
         if ckp and i % 5 == 0 and i > 0:[m
             with open(ckp + "/query_strings.json", "w") as f:[m
                 json.dump(query_strings, f)[m
[1mdiff --git a/src/get_cardinalities_queries/query_randomly_generated.py b/src/get_cardinalities_queries/query_randomly_generated.py[m
[1mindex d55c437..c6294fb 100644[m
[1m--- a/src/get_cardinalities_queries/query_randomly_generated.py[m
[1m+++ b/src/get_cardinalities_queries/query_randomly_generated.py[m
[36m@@ -22,8 +22,7 @@[m [mdef main(endpoint, graph_uri, queries_location, dataset_save_location, ckp_locat[m
 [m
 [m
 if __name__ == "__main__":[m
[31m-    project_root = os.getcwd()[m
[31m-[m
[32m+[m[32m    project_root = os.path.join(os.getcwd(), "..", "..")[m
     randomly_generated_queries_location = os.path.join(project_root, "output", "randomly_generated_queries",[m
                                                        "queries_complex.npy")[m
     dataset_save_location = os.path.join(project_root, "output", "randomly_generated_train_dataset")[m
[1mdiff --git a/src/get_cardinalities_queries/query_watdiv.py b/src/get_cardinalities_queries/query_watdiv.py[m
[1mindex cee40aa..4c62f7f 100644[m
[1m--- a/src/get_cardinalities_queries/query_watdiv.py[m
[1m+++ b/src/get_cardinalities_queries/query_watdiv.py[m
[36m@@ -12,8 +12,7 @@[m [mdef load_watdiv(query_location):[m
 def main(endpoint, graph_uri, queries_location, dataset_save_location, ckp_location=None):[m
     queries = load_watdiv(queries_location)[m
     wrapped_endpoint = wrapper(endpoint, graph_uri)[m
[31m-    full_query_string, full_cardinalities = execute_array_of_queries(queries, wrapped_endpoint, ckp_location,[m
[31m-                                                                     queryRandom=False)[m
[32m+[m[32m    full_query_string, full_cardinalities = execute_array_of_queries(queries, wrapped_endpoint, ckp_location)[m
 [m
     with open(dataset_save_location + "/query_strings.json", "w") as f:[m
         json.dump(full_query_string, f)[m
